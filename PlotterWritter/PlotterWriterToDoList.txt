PlotterWriterToDoList

- Fixes
  [x] Skip lines where start point = end point
  [x] In DRAW_LINE_ART_6 with bDrawGuideLines = false, guidelines are still drawn
  [x] In DRAW_LINE_ART_9 with bDrawGuideLines = true, right guideline not drawn
  [x] In DrawFourQuadrants (all cases), first guideline is drawn twice and last is not ever drawn
  [x] Mismatched code generation warning
  [x] Test ESC commands to see if they're more responsive

  [x] Locate corner points for 8 1/2 x 11
  [x] Test new thick-frame code
  [x] Test four-quadrant code w/ new pen definition
  [-] Combine both four-quadrant algorithms & test
  [ ] Modify PlotLissajousCurve ()
      [ ] Take wavelengths as multiple of 1000 (e.g. - 1 instead of 1000)
      [ ] Take amplitude as peak-to-peak value (e.g. - 3000 = 1500 on each side of 0 line)
      [ ] Test with non-zero phase values
  [ ] Stretch method to take Point[], List<Point{}>, or List<List<Point>> along with Point for top-left and bottom-right
      Strecth or compress image points to fit edges of rectanble defined by top-left and bottom-right corners
      [ ] Make images scalable to 11 x 17, 8 1/2 x 11, 4 x 5, ...
  [ ] Add code to maintain clipping mask to hide points that extend above or below earlier plots
  [ ] Create code for new plot designs
      [x] Radial lines inside box
      [ ] Use PlotSteppedLines to draw triangles ("D:\Digital Images\Web Images\Line Art Images\6550e37dbe1c3a5525ecbbe6cd50c518.jpg")
      [ ] Spiral of Theodorus (Wikipedia)
      [ ] Fermat's spiral (Wikipedia)
      [ ] Fibonacci spiral (Wikipedia)
      [ ] Radical axis (Wikipedia)
      [ ] Sine wave
          [x] Basic sine wave with amplitude, wavelenght, resolution, ...
          [x] Lissajous curve
          [ ] Variying wavelength with start & end values and random
          [ ] Variying amplitude with start & end values hard-coded and random
          [ ] Stacked sine waves w/ same progression from shorter-to-longer (or vice versa) waves, in phase
          [ ] Amplitude modulation using modulation range and sine function with wavelength
          [ ] Wavelength modulation using modulation range and sine function with wavelength
      [ ] Elipses
      [ ] Plot solutions to algebra polynomial equations, ...
      [ ] Drawings based on nude boy images, cats, bridges, cityscapes, mountainscapes, ships, other things of beauty
      [ ] Random-number-controlled lines, polygons, circles, arc, ellipses, ...
      [ ] Repeating images, recursively drawn inside large images (like cover of "Ummagumma")
      [ ] Repeating lines w/ small, cumulative, randomly-generated variations from one to the next ("D:\Digital Images\Web Images\Line Art Images\images (13).jpg")
      [ ] Random-number-generated mazes
  [x] Add option to skip first line in PlotSteppedLines
  [x] Adjust distance between sequention lines in DrawThickFrame
  [x] Adjust optimization in PlotSteppedLines for bGuideLinesJoined
  [x] Test non-right-angle joined-line shapes in all 4 orientations

- Features to research and implement
  [x] Polar-to-Cartesian conversion
  [x] Code to rotate a point [Point RotatePoint (Point ptCenter, int iAngle, Point ptRotatePoint)]
  [ ] Method to take center point, radius, # corners, # steps, pen selection, ... and draw 3-point stepped-line code for each point
      Example: 5 points to create pentagon using stepped-line code
      [ ] Also add # points between connections so pentagon-drawing call can become a pentagram, hexagon becomes Star of David, ...
  [ ] Multiple-line drawing
      [ ] Create wrapper method for taking 3 points (both as int and as Point) for plotting joined-line shapes
      [x] Connect equally-spaced points on one line to equally-spaced points on another line
      [ ] Allow one line (only one) to have beginning and ending points to be identical
      [ ] Allow using arcs instead of lines for one or both reference lines w/ radius specified for each (use 0 for straight line)
      [ ] Allow using arcs instead of lines for each of the connecting lines w/ radius specified for each (use 0 for straight line)
      [ ] Allow varying radius for each connecting line using starting and ending radius values (use 0 for straight line)
  [ ] Point coordinate validation method
  [ ] rect QueryPageLimits ()
  [ ] LineArray (start1, end1, start2, end2, #lines (default 2))
  [ ] New code to determine ending points for arcs, etc.
      [ ] Verify by drawing arc or other shape, then obtaining pen position
  [ ] Concentric shapes:
      [ ] Squares
      [ ] Triangles
      [ ] Pentagons, hexagons, ...
      [ ] Circles
      [ ] Elipzes
      [ ] Squares on outside morphing to circle on inside
          [ ] Corners rounding increasing as shape becomes more circular
          [ ] Corners drawn with arcs with increasing radius
  [ ] Draw spirals in various shapes:
      [ ] Squares (rounded corners optional)
      [ ] Triangles
      [ ] Pentagons, hexagons, ...
      [ ] Circles
      [ ] Elipzes
      [ ] Berzier curves
      [ ] Parabolic & hyperbolic curves
      [ ] Generated shapes from equations in ETHS "ModBra" book
      [ ] Fractal images (Mandolbrot set, generated maps, trees, ...)
      [ ] Squares on outside morphing to circle on inside
      Implement as shape-independent code to that it can draw spirals in any shape
  [ ] Square-to-circle spiral idea using arcs (also triangle to circle/elipse)
      with each concentric shape looking more cirucular by using arcs with progressively shorter radii
      Go from square corners (or rounded) by using arcs with progressible longer radii
  [ ] 3D images
      [ ] Earth globe
      [ ] Geodesic dome
      [ ] Dodecahedron, other similar shapes
      [ ] Plots of equations in 3D
  [ ] Implement UI like https://www.picotech.com/library/oscilloscopes/xy-display-mode
      2 panes, one for 2 waveshapes, the other for ZY viewing of both waveshapes
      Be able to plot either or both on same sheet
      Be able to scale entire image to fit paper
  [ ] Plotter sculpture:
      Attach magnet to pen carrier and put plotter under assembly of sand between 2 sheets of plexiglass with ball bearing moved by the magnet
        Use random numbers for values and shapre selection
        Draw Lissajoux patterns, line art (like the "futuristic" art in Star Trek TOS ("The Man Trap" season 1), harmonographs, hypotrochoids

- Enhancements
  [ ] For sorting by pen color
      [ ] Create a means of storing values of each of the states affected by state-changing HPGL commands
          [ ] With each new state-changing command, update that state to its default setting for all prior HPGL commands, OR
          [ ] Create a struct with the complete set of all command-settable states and initialize all to default values,
              [ ] Update the single member instance of that struct with each state-changing HPGL command
              [ ] Attach a copy (not a pointer) to each HPGL command before sorting
              [ ] Add any necessary state-changing commands after sorting to maintain consistent states for each command with their pre-sort states
      [ ] Create a meta-HPGL notation for instructing the driver engine to save pen position in an array of x/y int pairs for properly repositioning the pen before resuming a relative-position plot command that depends on the pen being where the previous instruction left it before changing pen color
  [x] Port SerialSend.c to native cpp
  [x] Write C++/CLI component to pass data between C# & native C++ components
  [x] Support both serial and parallel ports (/P:<device name>) for parallel
      [x] Default serial port to 9600 baud
  [x] Clean up SerialPortWriter
      [x] Comment out (or make conditional) all printf statements
      [x] Call OpenComPort in default constructor like in ParallelPortWriter
      [x] Make m_szDevName an std::string
      [x] Call CloseOutputPort in destructor
  [ ] Hello World apps
      [ ] Static helper class in native C++
      [ ] Static helper class in C#
      [ ] Static helper class in C++/CLI
      [x] Common base class in native C++
      [x] Common base class in C#
      [x] Common base class in C++/CLI
  [x] Anything special to do for handling large buffers (> 1024)?  Handled automagically?
      [x] Test on serial
      [x] Test on parallel
  [x] Move code to iterate through printers to base class
      [ ] Return smart point to vector of stucts w/all fields currently used in iterating code
          along with int for USB port #
      [ ] Call before looking for COM port, skip over USB ports already in use by printers
  [x] Add code to read from serial port
      [ ] Add overloaded WriteText method to optionally read after writing
          WriteText returns a string containing what's in the read buffer, empty if nothing
      [ ] Make sure GetPortName exists in base class and is overridden in each subclass
      [ ] Put the code in the base class to return the portname along with code to set it
          Make PortName a property?
      [ ] Add ReadText method to explicitly read from port
      [x] Retrieve document size status?
      [x} Add methods in C# to query specific status info
      [x] Add parameter for sleep time between write & read
          (in case plotter needs time to respond)
  [ ] Why does ParallelPortWriter need special UTG16 code while SerialPortWriter doesn't?
  [x] Test for error codes in C++/CLI and throw exception
      [x] Catch in C# layer
  [ ] Write C# component to create HPGL strings to drive plotter
      [ ] Create basic shapes (rectangles, trapezoids, ...)
      [ ] Create sine waves
      [ ] Create simple shapes in patterns (sine waves, straight lines, curves, ...)
      [ ] Create cycloids
      [ ] Create frames by connecting dots along one line to dots along another
  [ ] Later, add ADO.NET compnent for storing state to Access database
      [ ] Also store strings, HPGL resources, shape data, stuff entered via UI, ...
  [ ] Later, add WPF component for UI
  [ ] Later, add ASP.NET compnent for web UI
  [ ] Later, read text file with HPGL commands
  [x] Buffer HPGL commands and sort first by pen,
      [ ] and then to minimize travel time from the end of one line to the start of the next
      [ ] Add code to track all states set by instructions
          [ ] Character set(s) selected
          [ ] Absolure/relative plotting
          [ ] Scaling
          [ ] Pen up/down
  [x] Add bidirectional support to serial port code to receive data from plotter
      [x] Response to "what is your device name?" query
      [x] Point coordinates for manually entering digitized data
- Deferred Fixes
  [ ] Unresolved token errors in adding helper class project
  [ ] Unresolved external errors in adding CLI base class project
- Deferred Enhancements
  [ ] Clean up SerialPortWriter
      [ ] Call OpenNamedPort in overloaded constructor that takes int iPortNumber
      [ ] Call OpenComPort in WriteTextString like in ParallelPortWriter
  [x] Create abstract base class that both C++/CLI classess inherit from
      [x] Derive both classes from it
      [x] Adjust C# code to use base class pointer polymorphically
